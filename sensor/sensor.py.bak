import cv2
import numpy as np
import copy
import threading
from utils import draw_boxes


__author__ = "Abarajithan G"
__copyright__ = "Copyright 2019, Final Year Project"
__credits__ = ["Abarajithan G", "Chinthana Wimalasuriya"]
__version__ = "1.0.0"
__maintainer__ = "Abarajthan G"
__email__ = "abarajithan07@gmail.com"
__status__ = "Research"


'''
Counts vehicles, weights flows, finds phase flows, takes moving average. This runs in a sub-thread.
'''
class WeightedFlowSensor(threading.Thread):
    def __init__(self,
                tracker,
                decode_netout,
                config,
                buffer=None,
                ):
        super(WeightedFlowSensor, self).__init__()
        self.buffer = buffer
        self.tracker = tracker
        self.num_cycles = 0
        self.stop_flag=None
        self.config = config
        self.ways = ['n','e','w','s']
        self.decode_netout = decode_netout
    
    def begin(self):
        self.stop_flag = 0
        self.buffer = []
        self.start()
    
    def run(self):
        while ( self.stop_flag==0):
            if len(self.buffer) > self.config.MAX_NETOUT_BUFFER_SIZE:
                print('Buffer Overflow')
                break

            if len(self.buffer)==0:
                '''Skipping empty buffer'''
                continue
            
            images, netout = self.buffer.pop(0)
            if netout is None:
                continue

            boxes = [self.decode_netout(netout[i].reshape(8,12,5,9), config=self.config) for i in range(4)]
            images = [draw_boxes(images[i], boxes[i], labels=self.config.LABELS) for i in range(4)]
            images = [self.after_frame(frame=images[i], boxes=boxes[i], way_n=self.ways[i]) for i in range(4)]
            
            if self.config.SHOW_TRACKING:
                '''Displaying the simultaneous tracking of 4 streams'''
                images = np.vstack(
                    (
                    np.hstack((images[0], images[1])),
                    np.hstack((images[2], images[3]))
                    )
                )
                images = cv2.resize(images, (768, 512))
                cv2.imshow('TRACKING', images)
                cv2.waitKey(1)

    def after_frame(self, frame,boxes, way_n):
        config=self.config

        self.tracker.associate(bboxes=boxes,
                               way_n=way_n,
                               config=config)
        if config.SHOW_TRACKING:
            frame = self.tracker.draw_tracking(frame, way_n, boxes,
                                               LABELS=config.LABELS,
                                               config=config)
        self.update_lane_measures(way_n=way_n, config=config)

        return frame


    def update_lane_measures(self, way_n, config):
        for track in self.tracker.tracks_leaving:

            '''
            Hold ghost tracks to prevent double counting
            '''
            track.left_count += 1

            if track.left_count > config.GHOST_BOX_DURATIONS[track.label_i]:
                print("Label:    ", config.LABELS[track.label_i])
                self.tracker.tracks_leaving.remove(track)
                continue
            elif track.left_count > 0:
                continue

            x_center = (track.bbox_last.xmax + track.bbox_last.xmin)/2

            for lane in config.LANES[way_n].values():

                if lane.is_leaving_via(xmax=track.bbox_last.xmax, x_center=x_center, config=config):
                    lane.cycle_measure += config.PCU[track.label_i]

    def close(self):
        self.stop_flag = 1

